import org.xml.sax.InputSource;
import org.xml.sax.XMLReader;
import org.xml.sax.helpers.XMLReaderFactory;
import java.io.IOException;
import java.io.OutputStreamWriter;
import java.io.StringReader;
import org.xml.sax.Attributes;
import org.xml.sax.ContentHandler;
import org.xml.sax.Locator;
import org.xml.sax.SAXException;
public class SAX1 { //replace SAX1 by Main for pasting it as Main.java in https://repl.it/
public static void main(String[] args) {
OutputStreamWriter outputStreamWriter = new OutputStreamWriter(System.out);
try {
XMLReader parser = XMLReaderFactory.createXMLReader();
InputSource source = new InputSource("rss.xml");
//InputSource source = new InputSource(new StringReader(""));
parser.setContentHandler(new SAXHandler(outputStreamWriter)
);
parser.parse(source);
} catch (Exception e) {
e.printStackTrace();
} nally {
try {
outputStreamWriter.close();
} catch (IOException e) {
e.printStackTrace();
}
}
}
}
class SAXHandler implements ContentHandler {
Locator locator;
Integer indent;
OutputStreamWriter outputStreamWriter;
private nal Integer TAB_SIZE = 4;
public SAXHandler(OutputStreamWriter outputStreamWriter) {
this.outputStreamWriter = outputStreamWriter;
indent = 0;
}
@Override
public void setDocumentLocator(Locator locator) {
this.locator = locator;
}
@Override
public void startDocument() throws SAXException {
printIndented("<?xml version=\"1.0\" encoding=\"UTF-8\"?>", false, false);
}
@Override
public void endDocument() throws SAXException {
// ...
}
@Override
public void startElement(String uri, String localName, String qName, Attributes atts) throws
SAXException {
printIndented(String.format("<%s", qName), true, false);
printAttributes(atts);
printIndented(">\r\n", false, true);
++indent;
}
@Override
public void endElement(String uri, String localName, String qName) throws SAXException {
--indent;
printIndented(String.format("</%s>", qName), true, false);
}
@Override
public void characters(char[] chars, int start, int length) throws SAXException {
String s = new String(chars, start, length).toUpperCase().trim();
if (s.length() > 0) {
printIndented(s, false, false);
}
}
@Override
public void startPrexMapping(String prex, String uri) throws SAXException {
// ...
}
@Override
public void endPrexMapping(String prex) throws SAXException {
// ...
}
@Override
public void ignorableWhitespace(char[] chars, int start, int length) throws SAXException {
// ...
}
@Override
public void processingInstruction(String target, String data) throws SAXException {
// ...
}
@Override
public void skippedEntity(String name) throws SAXException {
// ...
}
private void printIndented(String what, boolean isEndOfElement, boolean isElement) {
try {
if(isEndOfElement) {
outputStreamWriter.write("\r\n");
}
if (indent > 0 && !isElement) {
outputStreamWriter.write(String.format("%1$" + (indent * TAB_SIZE) + "s", ""));
}
outputStreamWriter.write(what);
outputStreamWriter.ush();
} catch (IOException e) {
e.printStackTrace();
}
}
private void printAttributes(Attributes atts) {
if (atts.getLength() > 0) {
++indent;
for (int i = 0; i < atts.getLength(); ++i) {
String name = atts.getQName(i);
printIndented(String.format(" %s = \"%s\"", name, atts.getValue(i)), false, true);
}
--indent;
}
}
